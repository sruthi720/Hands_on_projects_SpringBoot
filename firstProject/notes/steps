Step 1: Create a Spring Boot Project in IntelliJ IDEA

Open IntelliJ IDEA → Click on New Project.
Select Spring Initializr.
Choose Maven or Gradle as the project type.
Select Spring Boot Version (e.g., 3.0.0).
Add dependencies:
Spring Web (for REST API)
Spring Data JPA (for database interactions)
H2 Database (in-memory database)
Click Finish to create the project.
-------
Step 2: Configure application.properties
Create a file in src/main/resources/application.properties to configure the H2 database.
--------
Step 3: Create the Model (Entity)
Create a class named Product.java inside the package com.example.crud.model.
------------
Step 4: Create a Repository
Create an interface named ProductRepository.java inside com.example.crud.repository.

Explanation:
JpaRepository<Product, Long> → Provides built-in CRUD operations for Product with Long as the ID type.
---------
Step 5: Create the Service Layer
Create a class named ProductService.java inside com.example.crud.service.

Explanation:
@Service → Marks the class as a service component.
@Autowired → Injects the repository dependency.
CRUD Methods:
saveProduct() → Saves a new product or updates an existing one.
getAllProducts() → Fetches all products from the database.
getProductById() → Retrieves a product by ID.
deleteProduct() → Deletes a product by ID.
--------------------------------------------
Step 6: Create a Controller
Create a class named ProductController.java inside com.example.crud.controller.

Explanation:
@RestController → Defines a REST API controller.
@RequestMapping("/products") → Base path for API endpoints.
@PostMapping → Handles POST requests (Create).
@GetMapping → Handles GET requests (Read).
@PutMapping → Handles PUT requests (Update).
@DeleteMapping → Handles DELETE requests (Delete).
@RequestBody
-----------------------------------------
Step 7: Run the Application
Open IntelliJ IDEA.
Go to CrudApplication.java.
Click Run (or use mvn spring-boot:run in the terminal).


1️⃣ Console Output in IntelliJ IDEA
Run the Application
Open CrudApplication.java (in src/main/java/com/example/crud/).
Click the Run button (▶️) or use the shortcut Shift + F10.
You will see log messages in the IntelliJ console.
If the application starts successfully, you should see:
java
Copy
Edit
Tomcat started on port(s): 8080 (http)
Started CrudApplication in X.XXX seconds (JVM running for X.XXX)
----------------------------------------------------------------
Step 8: Test the Endpoints Using Postman or CURL
Create a Product (POST)

2️⃣ Testing the API using Postman or CURL
You can test the CRUD operations by sending HTTP requests.

🔹 Open API Endpoints in a Browser/Postman
Since this is a REST API, you won’t see a UI, but you can test it using Postman, cURL, or directly in the browser.

🔹 Test API Endpoints
✅ Create a Product (POST)
Using Postman:

1.Open Postman.
2.Select POST and enter the URL:

bash--> http://localhost:8080/products

3.In the Body (JSON format), enter:
json --->
{
  "name": "Laptop",
  "price": 50000
}
4.Click Send. You should receive a response with the created product.

OR
Using cURL (in the terminal):

sh--->
curl -X POST http://localhost:8080/products -H "Content-Type: application/json" -d '{"name": "Laptop", "price": 50000}'

_________________________
✅ Get All Products (GET)
Browser: Open
bash-->
http://localhost:8080/products
You should see JSON output like:
json--->
[
  {
    "id": 1,
    "name": "Laptop",
    "price": 50000
  }
]
OR   Using cURL:
sh-->
curl -X GET http://localhost:8080/products

✅ Get a Product by ID (GET)
URL:
bash-->
http://localhost:8080/products/1
Response:
json-->
{
  "id": 1,
  "name": "Laptop",
  "price": 50000
}


✅ Update a Product (PUT)
Using Postman:
1.Use PUT method.
2.URL:
bash-->
http://localhost:8080/products/1

3.Body (JSON):
json-->
{
  "name": "Gaming Laptop",
  "price": 70000
}
4.Click Send.


✅ Delete a Product (DELETE)
Using Postman:

Set method to DELETE
Use URL:
bash-->
http://localhost:8080/products/1
Click Send.
Using cURL:

sh-->
curl -X DELETE http://localhost:8080/products/1
------------------------------------------------
3️⃣ Access the H2 Database Console
If you enabled H2 Console, you can check the database.

1.Open the browser and go to:
bash-->
http://localhost:8080/h2-console
2.JDBC URL: jdbc:h2:mem:testdb
3.Username: sa
  Password: (leave empty)
4.lick Connect.
5.Run this SQL query to check data:
sql-->
SELECT * FROM PRODUCTS;

🎯 Summary
Check IntelliJ Console for application logs.
Test API Endpoints using Postman, cURL, or Browser.
View the database using the H2 Console.
Now, your Spring Boot CRUD application is fully tested and running! 🚀
-----------------------------------------------------------------------







